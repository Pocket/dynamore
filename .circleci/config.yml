version: 2.1

orbs:
  pocket: pocket/circleci-orbs@1.2.8

# Workflow shortcuts
# You can remove unnecessary shortcuts as applicable
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main


commands:
  setup_dependencies:
    description: Install npm packages and terraform
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '95:3f:a9:02:0d:06:71:f9:5d:90:1e:a0:e5:e3:c3:25'
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      - run:
          name: Setup GitHub Token
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> ~/.npmrc
      - run: npm ci
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - node_modules

jobs:
  test_integrations:
    description: Run integration tests against external services, e.g. MySQL
    docker:
      # The application
      - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          - NODE_ENV=test
          - AWS_XRAY_LOG_LEVEL=silent
          - AWS_XRAY_CONTEXT_MISSING=LOG_ERROR
      # localstack
      - image: localstack/localstack@sha256:28aaf7eb96bc41fa4979e7dc1ad65c5938660684e6d5c518e20de703847f1052
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          DEBUG: 1
          SERVICES: dynamodb
          DATA_DIR: /tmp/localstack/data
          EXTRA_CORS_ALLOWED_HEADERS: Content-Disposition, Content-Type, x-amz-acl
          EXTRA_CORS_EXPOSE_HEADERS: ETag
          HOSTNAME_EXTERNAL: localstack
    steps:
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: install node modules
          command: npm ci
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: run setup.sh
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --aws
      - run:
          name: run tests
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0)
            npm run test-integrations  -- --ci --watchAll=false --forceExit

  test_specs:
    description: Run spec tests
    docker:
      - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          - NODE_ENV=test
          - AWS_XRAY_LOG_LEVEL=silent
          - AWS_XRAY_CONTEXT_MISSING=LOG_ERROR
    steps:
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
      - run:
          name: install node modules
          command: npm ci
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v1-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: run tests
          command: npm run test

  # publish:
  #   docker:
  #     - image: circleci/node:16@sha256:1803e9ed7deec9456ad2609124b7333d40b2eec0cf34998ae766cbf90c9a3625
  #       auth:
  #         username: $DOCKERHUB_USERNAME
  #         password: $DOCKERHUB_PASSWORD
  #   steps:
  #     - setup_dependencies
  #     - run: npx semantic-release
  #     ## Let's update the package.json and then publish with a different name to npm registry.
  #     - run: echo $(jq '.name = "@pocket-tools/dynamore" | del(.publishConfig)' package.json) > package.json
  #     - run:
  #         name: Setup NPM Token
  #         command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
  #     - run: '(test -f .version && npm publish --access=public) || echo .version does not exist, no release was made, skipping npm registry publish'

workflows:
  all:
    jobs:
      - test_specs:
          <<: *not_main
          context: pocket
          name: test_specs

      - test_integrations:
          <<: *not_main
          context: pocket
          name: test_integrations

      # - publish:
      #     context: pocket
      #     name: Publish NPM package

